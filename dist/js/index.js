"use strict";
var debug = require("debug")("express:server");
var http = require("http");
var serverModule = require("./App");
//get port from environment and store in Express.
var port = normalizePort(process.env.PORT || 8080);
var app = serverModule.Server.bootstrap().app;
app.set("port", port);
// create http server
var server = http.createServer(app);
// listen on provided ports
server.listen(port);
// add error handler
server.on("error", onError);
// start listening on port
server.on("listening", onListening);
function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}
/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }
    var bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;
    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + "requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string"
        ? "pipe " + addr
        : "port " + addr.port;
    debug("Listening on " + bind);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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Q2xDLENBQUMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJleHByZXNzOnNlcnZlclwiKTtcclxudmFyIGh0dHAgPSByZXF1aXJlKFwiaHR0cFwiKTtcclxudmFyIHNlcnZlck1vZHVsZSA9IHJlcXVpcmUoXCIuL0FwcFwiKTtcclxuXHJcbi8vZ2V0IHBvcnQgZnJvbSBlbnZpcm9ubWVudCBhbmQgc3RvcmUgaW4gRXhwcmVzcy5cclxudmFyIHBvcnQgPSBub3JtYWxpemVQb3J0KHByb2Nlc3MuZW52LlBPUlQgfHwgODA4MCk7XHJcbnZhciBhcHAgPSBzZXJ2ZXJNb2R1bGUuU2VydmVyLmJvb3RzdHJhcCgpLmFwcDtcclxuYXBwLnNldChcInBvcnRcIiwgcG9ydCk7XHJcblxyXG4vLyBjcmVhdGUgaHR0cCBzZXJ2ZXJcclxudmFyIHNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKGFwcCk7XHJcblxyXG4vLyBsaXN0ZW4gb24gcHJvdmlkZWQgcG9ydHNcclxuc2VydmVyLmxpc3Rlbihwb3J0KTtcclxuXHJcbi8vIGFkZCBlcnJvciBoYW5kbGVyXHJcbnNlcnZlci5vbihcImVycm9yXCIsIG9uRXJyb3IpO1xyXG5cclxuLy8gc3RhcnQgbGlzdGVuaW5nIG9uIHBvcnRcclxuc2VydmVyLm9uKFwibGlzdGVuaW5nXCIsIG9uTGlzdGVuaW5nKTtcclxuXHJcblxyXG5mdW5jdGlvbiBub3JtYWxpemVQb3J0KHZhbDogYW55KSB7XHJcbiAgICB2YXIgcG9ydCA9IHBhcnNlSW50KHZhbCwgMTApO1xyXG5cclxuICAgIGlmIChpc05hTihwb3J0KSkge1xyXG4gICAgICAgIC8vIG5hbWVkIHBpcGVcclxuICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwb3J0ID49IDApIHtcclxuICAgICAgICAvLyBwb3J0IG51bWJlclxyXG4gICAgICAgIHJldHVybiBwb3J0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBFdmVudCBsaXN0ZW5lciBmb3IgSFRUUCBzZXJ2ZXIgXCJlcnJvclwiIGV2ZW50LlxyXG4gKi9cclxuZnVuY3Rpb24gb25FcnJvcihlcnJvcjogYW55KSB7XHJcbiAgICBpZiAoZXJyb3Iuc3lzY2FsbCAhPT0gXCJsaXN0ZW5cIikge1xyXG4gICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciAgYmluZCA9IHR5cGVvZiBwb3J0ID09PSBcInN0cmluZ1wiXHJcbiAgICAgICAgPyBcIlBpcGUgXCIgKyBwb3J0XHJcbiAgICAgICAgOiBcIlBvcnQgXCIgKyBwb3J0O1xyXG5cclxuICAgIC8vIGhhbmRsZSBzcGVjaWZpYyBsaXN0ZW4gZXJyb3JzIHdpdGggZnJpZW5kbHkgbWVzc2FnZXNcclxuICAgIHN3aXRjaCAoZXJyb3IuY29kZSkge1xyXG4gICAgICAgIGNhc2UgXCJFQUNDRVNcIjpcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihiaW5kICsgXCJyZXF1aXJlcyBlbGV2YXRlZCBwcml2aWxlZ2VzXCIpO1xyXG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJFQUREUklOVVNFXCI6XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYmluZCArIFwiIGlzIGFscmVhZHkgaW4gdXNlXCIpO1xyXG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogRXZlbnQgbGlzdGVuZXIgZm9yIEhUVFAgc2VydmVyIFwibGlzdGVuaW5nXCIgZXZlbnQuXHJcbiAqL1xyXG5mdW5jdGlvbiBvbkxpc3RlbmluZygpIHtcclxuICAgIHZhciBhZGRyID0gc2VydmVyLmFkZHJlc3MoKTtcclxuICAgIHZhciBiaW5kID0gdHlwZW9mIGFkZHIgPT09IFwic3RyaW5nXCJcclxuICAgICAgICA/IFwicGlwZSBcIiArIGFkZHJcclxuICAgICAgICA6IFwicG9ydCBcIiArIGFkZHIucG9ydDtcclxuICAgIGRlYnVnKFwiTGlzdGVuaW5nIG9uIFwiICsgYmluZCk7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIuLlxcc3JjIn0=
